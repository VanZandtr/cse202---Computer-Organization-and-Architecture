/lib64/ld-linux-x86-64.so.2
__gmon_start__
libc.so.6
socket
fflush
strcpy
exit
sprintf
fopen
__isoc99_sscanf
connect
signal
puts
stdin
strtol
fgets
__errno_location
read
stdout
strcasecmp
getenv
__ctype_b_loc
stderr
alarm
gethostbyname
gethostname
bcopy
close
fprintf
sleep
__libc_start_main
write
GLIBC_2.3
GLIBC_2.7
GLIBC_2.2.5
%z6 
%r6 
%j6 
%b6 
%Z6 
%R6 
%J6 
%B6 
%:6 
%26 
%*6 
H=@I`
ugUH
s%f.
fffff.
AVAUATUSH
d$0M
T$ H
D$(H
P[]A\A]A^
=V6 
ATUSH
[]A\
t':E
=K1 
***truncH
ated***
=C1 
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
Error: CH
lient unI
able to H
create sI
G ockefA
Error: DH
NS is unI
able to H
resolve I
server aI
G(ddrefA
G,ssA
Error: UH
nable toI
 connectH
 to the I
G servfA
G$erA
Error: RH
esult stI
ring tooH
 large. I
IncreaseH
 SUBMITRI
_MAXBUF
< tE
D$0H
Error: CH
lient unI
able to H
write toI
 the serI
G(ver
Error: CH
lient unI
able to H
read firI
st headeH
r from sI
G0ervefA
[]A\A]A^A_
Error: CH
lient unI
able to H
read heaI
ders froH
m serverI
Error: CH
lient unI
able to H
read staI
tus messH
age fromI
 server
Error: RH
esult stI
ring conH
tains anI
 illegalH
 or unprI
intable H
characteI
W8fA
G@r.A
L$ L
D$(H
Error: CH
lient unH
able to H
create sH
E ockef
Error: DH
NS is unH
able to H
resolve H
server aH
E(ddref
E,ss
APRA
fffff.
l$ L
t$(L
|$0H
t3UH
%s: Error: Couldn't open %s
Usage: %s [<input_file>]
That's number 2.  Keep going!
Halfway there!
Good work!  On to the next...
Welcome to my fiendish little bomb. You have 6 phases with
which to blow yourself up. Have a nice day!
Phase 1 defused. How about the next one?
So you got that one.  Try this one.
Houses will begat jobs, jobs will begat houses.
Wow! You've defused the secret stage!
So you think you can stop the bomb with ctrl-c, do you?
Initialization error: Running on an illegal host [1]
Initialization error: Running on an illegal host [2]
ERROR: Input string is too large.
Your instructor has been notified.
Curses, you've found the secret phase!
But finding it and solving it are quite different...
Congratulations! You've defused the bomb!
Your instructor has been notified and will verify your solution.
Well...
OK. :-)
Invalid phase%s
Initialization error:
defused
exploded
%d:%s:%d:%s
BOOM!!!
The bomb has blown up.
%d %d %d %d %d %d
Error: Premature EOF on stdin
GRADE_BOMB
Error: Input line too long
%d %d %s
DrEvil
nereid.cse.lehigh.edu
nereid
nix.cse.lehigh.edu
pan.cse.lehigh.edu
phobos.cse.lehigh.edu
phobos
puck.cse.lehigh.edu
puck
saturn.cse.lehigh.edu
saturn
vesta.cse.lehigh.edu
vesta
ariel.cse.lehigh.edu
ariel
caliban.cse.lehigh.edu
caliban
callisto.cse.lehigh.edu
callisto
ceres.cse.lehigh.edu
ceres
chiron.cse.lehigh.edu
chiron
cupid.cse.lehigh.edu
cupid
dactyl.cse.lehigh.edu
dactyl
enceladus.cse.lehigh.edu
enceladus
eris.cse.lehigh.edu
eris
ganymede.cse.lehigh.edu
ganymede
hydra.cse.lehigh.edu
hydra
iapetus.cse.lehigh.edu
iapetus
io.cse.lehigh.edu
jupiter.cse.lehigh.edu
jupiter
mars.cse.lehigh.edu
mars
mercury.cse.lehigh.edu
mercury
miranda.cse.lehigh.edu
miranda
Program timed out after %d seconds
Error: HTTP request failed with error %d: %s
GET /%s/submitr.pl/?userid=%s&userpwd=%s&lab=%s&result=%s&submit=submit HTTP/1.0
Error: Unable to connect to server %s
%%%02X
%s %d %[a-zA-z ]
AUTORESULT_STRING=%s
sp19
csapp
cmaXtENom9gSxanmnqql
rlv220
/***************************************************************************
 * Dr. Evil's Insidious Bomb, Version 1.1
 * Copyright 2011, Dr. Evil Incorporated. All rights reserved.
 * LICENSE:
 * Dr. Evil Incorporated (the PERPETRATOR) hereby grants you (the
 * VICTIM) explicit permission to use this bomb (the BOMB).  This is a
 * time limited license, which expires on the death of the VICTIM.
 * The PERPETRATOR takes no responsibility for damage, frustration,
 * insanity, bug-eyes, carpal-tunnel syndrome, loss of sleep, or other
 * harm to the VICTIM.  Unless the PERPETRATOR wants to take credit,
 * that is.  The VICTIM may not distribute this bomb source code to
 * any enemies of the PERPETRATOR.  No VICTIM may debug,
 * reverse-engineer, run "strings" on, decompile, decrypt, or use any
 * other technique to gain knowledge of and defuse the BOMB.  BOMB
 * proof clothing may not be worn when handling this program.  The
 * PERPETRATOR will not apologize for the PERPETRATOR's poor sense of
 * humor.  This license is null and void where the BOMB is prohibited
 * by law.
 ***************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include "support.h"
#include "phases.h"
 * Note to self: Remember to erase this file so my victims will have no
 * idea what is going on, and so they will all blow up in a
 * spectaculary fiendish explosion. -- Dr. Evil 
FILE *infile;
int main(int argc, char *argv[])
    char *input;
    /* Note to self: remember to port this bomb to Windows and put a 
     * fantastic GUI on it. */
    /* When run with no arguments, the bomb reads its input lines 
     * from standard input. */
    if (argc == 1) {  
	infile = stdin;
    } 
    /* When run with one argument <file>, the bomb reads from <file> 
     * until EOF, and then switches to standard input. Thus, as you 
     * defuse each phase, you can add its defusing string to <file> and
     * avoid having to retype it. */
    else if (argc == 2) {
	if (!(infile = fopen(argv[1], "r"))) {
	    printf("%s: Error: Couldn't open %s\n", argv[0], argv[1]);
	    exit(8);
    }
    /* You can't call the bomb with more than 1 command line argument. */
    else {
	printf("Usage: %s [<input_file>]\n", argv[0]);
	exit(8);
    }
    /* Do all sorts of secret stuff that makes the bomb harder to defuse. */
    initialize_bomb();
    printf("Welcome to my fiendish little bomb. You have 6 phases with\n");
    printf("which to blow yourself up. Have a nice day!\n");
    /* Hmm...  Six phases must be more secure than one phase! */
    input = read_line();             /* Get input                   */
    phase_1(input);                  /* Run the phase               */
    phase_defused();                 /* Drat!  They figured it out!
				      * Let me know how they did it. */
    printf("Phase 1 defused. How about the next one?\n");
    /* The second phase is harder.  No one will ever figure out
     * how to defuse this... */
    input = read_line();
    phase_2(input);
    phase_defused();
    printf("That's number 2.  Keep going!\n");
    /* I guess this is too easy so far.  Some more complex code will
     * confuse people. */
    input = read_line();
    phase_3(input);
    phase_defused();
    printf("Halfway there!\n");
    /* Oh yeah?  Well, how good is your math?  Try on this saucy problem! */
    input = read_line();
    phase_4(input);
    phase_defused();
    printf("So you got that one.  Try this one.\n");
    
    /* Round and 'round in memory we go, where we stop, the bomb blows! */
    input = read_line();
    phase_5(input);
    phase_defused();
    printf("Good work!  On to the next...\n");
    /* This phase will never be used, since no one will get past the
     * earlier ones.  But just in case, make this one extra hard. */
    input = read_line();
    phase_6(input);
    phase_defused();
    /* Wow, they got it!  But isn't something... missing?  Perhaps
     * something they overlooked?  Mua ha ha ha ha! */
    
    return 0;
